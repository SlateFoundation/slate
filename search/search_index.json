{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Welcome, browse sections at the top of the site.","title":"Welcome"},{"location":"#welcome","text":"Welcome, browse sections at the top of the site.","title":"Welcome"},{"location":"development/email/","text":"Working with Email \u00b6 Catching emails in development \u00b6 In the studio, you can enable relaying email to a specified SMTP endpoint. HELO and mailtrap are easy SMTP endpoints to set up for development that provide UIs for reviewing emails sent to all recipients. When emails are configured to be relayed to these services, they will be trapped for review and never actually delivered to anyone externally, no matter what recipients you use. As opposed to overriding recipient emails to test email features, this approach enables you to verify that personalized bulk emails send the right content to the right recipients. Using HELO \u00b6 Download and open the HELO app Launch studio, run start-all Install and activate postfix email backend: enable-email Configure postfix email backend to relay to EHLO app on Docker host machine: enable-email-relay host.docker.internal 2525 studio Or, using mailtrap: enable-email-relay smtp.mailtrap.io 2525 mailtrapusername mailtrappassword Sending a test email \u00b6 From the studio: Install netcat: hab pkg install --binlink core/netcat Open SMTP connection: nc localhost 25 Start SMTP session: EHLO localhost.localdomain Set sender: MAIL FROM: <sender@example.com> Set recipient: RCPT TO: <recipient@example.com> Set message: DATA Subject: Hello world! This is the body of my email. Have a good day. . Close SMTP session: QUIT Review postfix backend log: less -S /hab/cache/sys.log","title":"Working with Email"},{"location":"development/email/#working-with-email","text":"","title":"Working with Email"},{"location":"development/email/#catching-emails-in-development","text":"In the studio, you can enable relaying email to a specified SMTP endpoint. HELO and mailtrap are easy SMTP endpoints to set up for development that provide UIs for reviewing emails sent to all recipients. When emails are configured to be relayed to these services, they will be trapped for review and never actually delivered to anyone externally, no matter what recipients you use. As opposed to overriding recipient emails to test email features, this approach enables you to verify that personalized bulk emails send the right content to the right recipients.","title":"Catching emails in development"},{"location":"development/email/#using-helo","text":"Download and open the HELO app Launch studio, run start-all Install and activate postfix email backend: enable-email Configure postfix email backend to relay to EHLO app on Docker host machine: enable-email-relay host.docker.internal 2525 studio Or, using mailtrap: enable-email-relay smtp.mailtrap.io 2525 mailtrapusername mailtrappassword","title":"Using HELO"},{"location":"development/email/#sending-a-test-email","text":"From the studio: Install netcat: hab pkg install --binlink core/netcat Open SMTP connection: nc localhost 25 Start SMTP session: EHLO localhost.localdomain Set sender: MAIL FROM: <sender@example.com> Set recipient: RCPT TO: <recipient@example.com> Set message: DATA Subject: Hello world! This is the body of my email. Have a good day. . Close SMTP session: QUIT Review postfix backend log: less -S /hab/cache/sys.log","title":"Sending a test email"},{"location":"development/migrations/","text":"Developing Migrations \u00b6 Within the development studio: Create a new file under php-migrations/ Load modified working tree into runtime: update-site Execute all migrations: console-run migrations:execute --all (Re)Execute a specific migration: console-run migrations:execute --force \"Emergence/People/20191209_system-user\"","title":"Developing Migrations"},{"location":"development/migrations/#developing-migrations","text":"Within the development studio: Create a new file under php-migrations/ Load modified working tree into runtime: update-site Execute all migrations: console-run migrations:execute --all (Re)Execute a specific migration: console-run migrations:execute --force \"Emergence/People/20191209_system-user\"","title":"Developing Migrations"},{"location":"development/getting-started/local-studio/","text":"Local Studio Container \u00b6 This guide will walk you through launching a Docker-container local development studio and using it to test changes made within a local Git repository. Launch studio container \u00b6 Install Chef Habitat: curl -s https://raw.githubusercontent.com/habitat-sh/habitat/master/components/hab/install.sh | sudo bash Set up Chef Habitat, accepting defaults for all prompts: hab setup Clone emergence-skeleton repository and any submodules: git clone --recursive git@github.com:JarvusInnovations/emergence-skeleton.git Change into cloned directory: cd ./emergence-skeleton Launch studio: Use the included scripts-to-rules-them-all workflow script to configure and launch a studio session: 1 2 3 4 5 ``` bash script / studio ``` Review the notes printed to your terminal at the end of the studio startup process for a list of all available studio commands . Bootstrap and develop backend \u00b6 Start services: Use the studio command start-all to launch the http server (nginx), the application runtime (php-fpm), and a local mysql server: start-all At this point, you should be able to open localhost:7080 and see the error message Page not found . Build site: To build the entire site and load it, use the studio command update-site : update-site At this point, localhost:7080 should display the current build of the site Load fixture data into site database (optional): load-fixtures The standard fixture data includes the following users: Username Password AccountLevel About system system Developer Full system access admin admin Administrator Manage site and staff staff staff Staff Staff access user user User Regular user Make and apply changes: After editing code in the working tree, you must rebuild and update the site: update-site A command to automatically rebuild and update the site as changes are made to the working tree is also available, but currently not that efficient or reliable: watch-site Enable user registration \u00b6 To enable user registration on a site that comes with it disabled: # write class configuring enabling registration mkdir -p php-config/Emergence/People echo '<?php Emergence\\People\\RegistrationRequestHandler::$enableRegistration = true;' > php-config/Emergence/People/RegistrationRequestHandler.config.php # rebuild environment update-site After visiting /register and creating a new user account, you can use the studio command promote-user to upgrade the user account you just registered to the highest access level: promote-user <myuser>","title":"Local Studio Container"},{"location":"development/getting-started/local-studio/#local-studio-container","text":"This guide will walk you through launching a Docker-container local development studio and using it to test changes made within a local Git repository.","title":"Local Studio Container"},{"location":"development/getting-started/local-studio/#launch-studio-container","text":"Install Chef Habitat: curl -s https://raw.githubusercontent.com/habitat-sh/habitat/master/components/hab/install.sh | sudo bash Set up Chef Habitat, accepting defaults for all prompts: hab setup Clone emergence-skeleton repository and any submodules: git clone --recursive git@github.com:JarvusInnovations/emergence-skeleton.git Change into cloned directory: cd ./emergence-skeleton Launch studio: Use the included scripts-to-rules-them-all workflow script to configure and launch a studio session: 1 2 3 4 5 ``` bash script / studio ``` Review the notes printed to your terminal at the end of the studio startup process for a list of all available studio commands .","title":"Launch studio container"},{"location":"development/getting-started/local-studio/#bootstrap-and-develop-backend","text":"Start services: Use the studio command start-all to launch the http server (nginx), the application runtime (php-fpm), and a local mysql server: start-all At this point, you should be able to open localhost:7080 and see the error message Page not found . Build site: To build the entire site and load it, use the studio command update-site : update-site At this point, localhost:7080 should display the current build of the site Load fixture data into site database (optional): load-fixtures The standard fixture data includes the following users: Username Password AccountLevel About system system Developer Full system access admin admin Administrator Manage site and staff staff staff Staff Staff access user user User Regular user Make and apply changes: After editing code in the working tree, you must rebuild and update the site: update-site A command to automatically rebuild and update the site as changes are made to the working tree is also available, but currently not that efficient or reliable: watch-site","title":"Bootstrap and develop backend"},{"location":"development/getting-started/local-studio/#enable-user-registration","text":"To enable user registration on a site that comes with it disabled: # write class configuring enabling registration mkdir -p php-config/Emergence/People echo '<?php Emergence\\People\\RegistrationRequestHandler::$enableRegistration = true;' > php-config/Emergence/People/RegistrationRequestHandler.config.php # rebuild environment update-site After visiting /register and creating a new user account, you can use the studio command promote-user to upgrade the user account you just registered to the highest access level: promote-user <myuser>","title":"Enable user registration"},{"location":"development/getting-started/virtual-multisite/","text":"Virtual Multi-site Container \u00b6 Launch virtual multisite container \u00b6 docker run \\ --name emergence \\ -v emergence:/emergence \\ -p 80 :80 \\ -p 3306 :3306 \\ -p 9083 :9083 \\ jarvus/emergence","title":"Virtual Multi-site Container"},{"location":"development/getting-started/virtual-multisite/#virtual-multi-site-container","text":"","title":"Virtual Multi-site Container"},{"location":"development/getting-started/virtual-multisite/#launch-virtual-multisite-container","text":"docker run \\ --name emergence \\ -v emergence:/emergence \\ -p 80 :80 \\ -p 3306 :3306 \\ -p 9083 :9083 \\ jarvus/emergence","title":"Launch virtual multisite container"},{"location":"development/testing/e2e/","text":"End-to-end (E2E) testing \u00b6 Running tests \u00b6 Cypress is used to provide browser-level full-stack testing. The package.json file at the root of the repository specifies the dependencies for running the test suite and all the configuration/tests for Cypress are container in the cypress/ tree at the root of the repository. To get started, from a terminal outside the studio in the root of the repository: # install development tooling locally npm install # launch cypress app npm run cypress:open","title":"End-to-end (E2E) testing"},{"location":"development/testing/e2e/#end-to-end-e2e-testing","text":"","title":"End-to-end (E2E) testing"},{"location":"development/testing/e2e/#running-tests","text":"Cypress is used to provide browser-level full-stack testing. The package.json file at the root of the repository specifies the dependencies for running the test suite and all the configuration/tests for Cypress are container in the cypress/ tree at the root of the repository. To get started, from a terminal outside the studio in the root of the repository: # install development tooling locally npm install # launch cypress app npm run cypress:open","title":"Running tests"}]}