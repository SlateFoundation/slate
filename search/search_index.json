{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Slate Documentation \u00b6 Welcome, browse sections at the top of the site.","title":"Slate Documentation"},{"location":"#slate-documentation","text":"Welcome, browse sections at the top of the site.","title":"Slate Documentation"},{"location":"development/email/","text":"Working with Email \u00b6 Catching emails in development \u00b6 In the studio, you can enable relaying email to a specified SMTP endpoint. HELO and mailtrap are easy SMTP endpoints to set up for development that provide UIs for reviewing emails sent to all recipients. When emails are configured to be relayed to these services, they will be trapped for review and never actually delivered to anyone externally, no matter what recipients you use. As opposed to overriding recipient emails to test email features, this approach enables you to verify that personalized bulk emails send the right content to the right recipients. Using HELO \u00b6 Download and open the HELO app Launch studio, run start-all Install and activate postfix email backend: enable-email Configure postfix email backend to relay to EHLO app on Docker host machine: docker_host_ip = \" $( hab pkg exec core/busybox-static ip route | awk '/default/ { print $3 }' ) \" enable-email-relay \" ${ docker_host_ip } \" 2525 studio Sending a test email \u00b6 From the studio: Install netcat: hab pkg install --binlink core/netcat Open SMTP connection: nc localhost 25 Start SMTP session: EHLO localhost.localdomain Set sender: MAIL FROM: <sender@example.com> Set recipient: RCPT TO: <recipient@example.com> Set message: DATA Subject: Hello world! This is the body of my email. Have a good day. . Close SMTP session: QUIT Review postfix backend log: less -S /hab/cache/sys.log","title":"Working with Email"},{"location":"development/email/#working-with-email","text":"","title":"Working with Email"},{"location":"development/email/#catching-emails-in-development","text":"In the studio, you can enable relaying email to a specified SMTP endpoint. HELO and mailtrap are easy SMTP endpoints to set up for development that provide UIs for reviewing emails sent to all recipients. When emails are configured to be relayed to these services, they will be trapped for review and never actually delivered to anyone externally, no matter what recipients you use. As opposed to overriding recipient emails to test email features, this approach enables you to verify that personalized bulk emails send the right content to the right recipients.","title":"Catching emails in development"},{"location":"development/email/#using-helo","text":"Download and open the HELO app Launch studio, run start-all Install and activate postfix email backend: enable-email Configure postfix email backend to relay to EHLO app on Docker host machine: docker_host_ip = \" $( hab pkg exec core/busybox-static ip route | awk '/default/ { print $3 }' ) \" enable-email-relay \" ${ docker_host_ip } \" 2525 studio","title":"Using HELO"},{"location":"development/email/#sending-a-test-email","text":"From the studio: Install netcat: hab pkg install --binlink core/netcat Open SMTP connection: nc localhost 25 Start SMTP session: EHLO localhost.localdomain Set sender: MAIL FROM: <sender@example.com> Set recipient: RCPT TO: <recipient@example.com> Set message: DATA Subject: Hello world! This is the body of my email. Have a good day. . Close SMTP session: QUIT Review postfix backend log: less -S /hab/cache/sys.log","title":"Sending a test email"},{"location":"development/migrations/","text":"Developing Migrations \u00b6 Within the development studio: Create a new file under php-migrations/ Load modified working tree into runtime: update-site Execute all migrations: console-run migrations:execute --all (Re)Execute a specific migration: console-run migrations:execute --force \"Emergence/People/20191209_system-user\"","title":"Developing Migrations"},{"location":"development/migrations/#developing-migrations","text":"Within the development studio: Create a new file under php-migrations/ Load modified working tree into runtime: update-site Execute all migrations: console-run migrations:execute --all (Re)Execute a specific migration: console-run migrations:execute --force \"Emergence/People/20191209_system-user\"","title":"Developing Migrations"},{"location":"slate/development/clone-from-git/","text":"Clone Slate from git \u00b6 This guide is for developers who want to work on Slate\u2019s core code. It will walk you through setting up a fresh site instance and cloning a version of Slate into it from a remote git repository. Obtain an emergence host \u00b6 You will need a host server dedicated to running emergence. If you don\u2019t have access to one already, the easiest way to get started is to spin up a small Ubuntu 14.04 LTS virtual machine with a cloud provider like Digital Ocean, Google Cloud Compute, AWS, or countless others. Once you are logged in to your fresh Ubuntu 14.04 machine, follow emergence\u2019s installation guide to prepare it for hosting emergence-powered sites like Slate. Create a site \u00b6 Slate is based on emergence\u2019s skeleton-v2 site template. Unlike when provising a deployment instance of Slate, for development you want to create a site extending Slate\u2019s parent site rather than Slate itself. Slate\u2019s code will be checked out via git, and it would be messy to do that on top of another instance (and ossibly different version) of Slate. Use emergence\u2019s host control panel to create a new site with your desired hostname and initial user, just be sure to select skeleton-v2.emr.ge as the parent hostname. After the site is created login to /develop with your initial user developer account. Configure git link \u00b6 To configure a link with a git repository, create a file called Git.config.php in the top level of the php-config directory and copy its initial contents from the latest version of Slate\u2019s development Git.config.d/slate.php on Github. You may change originBranch to select a different source and change workingBranch to change which branch you\u2019ll be initially setup to commit to (both can be set to the same thing.) See the emergence manual page on git integration for full details on all the configuration options. Initialize git links \u00b6 Visit /git/init?repo=slate to initialize the link with the configured git repository. If you are cloning via HTTPS or don\u2019t need to push changes back to origin from the web interfaces, you can leave the deploy key field empty and skip setting one up. Without a deploy key you will need to SSH into the server and use the git CLI to push changes. Setting up a deploy key will enable you to use emergence\u2019s (currently minimal) web interface for commiting/pushing changes. Repeat this process for /git/init?repo=slate-admin and /git/init?repo=slate-theme as well if you\u2019ll be working on them. Import code from git \u00b6 Visit /git/import?repo=slate to pull the git tree into your emergence site. Repeat this process for /git/import?repo=slate-admin and /git/import?repo=slate-theme as well if you\u2019ll be working on them. Execute initial builds \u00b6 Your site will work at this point, but the production views of pages will be missing Slate\u2019s extensions to skeleton-v2`s frontend CSS and JS that go through a build process. Compile CSS by going to /sass/compile Compile JS by going to /sencha-cmd/pages-build (this one will take a while on your first run as the ExtJS framework sources are downloaded \u2013 just let it keep spinning and find something else to do for a bit) Compile SlateAdmin going to /sencha-cmd/app-build?name=SlateAdmin (this one will take a while on your first run as the ExtJS framework sources are downloaded \u2013 just let it keep spinning and find something else to do for a bit)","title":"Clone Slate from git"},{"location":"slate/development/clone-from-git/#clone-slate-from-git","text":"This guide is for developers who want to work on Slate\u2019s core code. It will walk you through setting up a fresh site instance and cloning a version of Slate into it from a remote git repository.","title":"Clone Slate from git"},{"location":"slate/development/clone-from-git/#obtain-an-emergence-host","text":"You will need a host server dedicated to running emergence. If you don\u2019t have access to one already, the easiest way to get started is to spin up a small Ubuntu 14.04 LTS virtual machine with a cloud provider like Digital Ocean, Google Cloud Compute, AWS, or countless others. Once you are logged in to your fresh Ubuntu 14.04 machine, follow emergence\u2019s installation guide to prepare it for hosting emergence-powered sites like Slate.","title":"Obtain an emergence host"},{"location":"slate/development/clone-from-git/#create-a-site","text":"Slate is based on emergence\u2019s skeleton-v2 site template. Unlike when provising a deployment instance of Slate, for development you want to create a site extending Slate\u2019s parent site rather than Slate itself. Slate\u2019s code will be checked out via git, and it would be messy to do that on top of another instance (and ossibly different version) of Slate. Use emergence\u2019s host control panel to create a new site with your desired hostname and initial user, just be sure to select skeleton-v2.emr.ge as the parent hostname. After the site is created login to /develop with your initial user developer account.","title":"Create a site"},{"location":"slate/development/clone-from-git/#configure-git-link","text":"To configure a link with a git repository, create a file called Git.config.php in the top level of the php-config directory and copy its initial contents from the latest version of Slate\u2019s development Git.config.d/slate.php on Github. You may change originBranch to select a different source and change workingBranch to change which branch you\u2019ll be initially setup to commit to (both can be set to the same thing.) See the emergence manual page on git integration for full details on all the configuration options.","title":"Configure git link"},{"location":"slate/development/clone-from-git/#initialize-git-links","text":"Visit /git/init?repo=slate to initialize the link with the configured git repository. If you are cloning via HTTPS or don\u2019t need to push changes back to origin from the web interfaces, you can leave the deploy key field empty and skip setting one up. Without a deploy key you will need to SSH into the server and use the git CLI to push changes. Setting up a deploy key will enable you to use emergence\u2019s (currently minimal) web interface for commiting/pushing changes. Repeat this process for /git/init?repo=slate-admin and /git/init?repo=slate-theme as well if you\u2019ll be working on them.","title":"Initialize git links"},{"location":"slate/development/clone-from-git/#import-code-from-git","text":"Visit /git/import?repo=slate to pull the git tree into your emergence site. Repeat this process for /git/import?repo=slate-admin and /git/import?repo=slate-theme as well if you\u2019ll be working on them.","title":"Import code from git"},{"location":"slate/development/clone-from-git/#execute-initial-builds","text":"Your site will work at this point, but the production views of pages will be missing Slate\u2019s extensions to skeleton-v2`s frontend CSS and JS that go through a build process. Compile CSS by going to /sass/compile Compile JS by going to /sencha-cmd/pages-build (this one will take a while on your first run as the ExtJS framework sources are downloaded \u2013 just let it keep spinning and find something else to do for a bit) Compile SlateAdmin going to /sencha-cmd/app-build?name=SlateAdmin (this one will take a while on your first run as the ExtJS framework sources are downloaded \u2013 just let it keep spinning and find something else to do for a bit)","title":"Execute initial builds"},{"location":"slate-admin/development/test-locally/","text":"Testing slate-admin locally \u00b6 cd into slate-admin repository root directory execute sencha web start & execute cd sencha-workspace/SlateAdmin execute sencha app build ensure you\u2019re logged in to whatever Slate API host you\u2019re testing against in the same browser session navigate browser to http://localhost:1841/sencha-workspace/SlateAdmin/?apiHost=v1-demo.node0.slate.is","title":"Testing slate-admin locally"},{"location":"slate-admin/development/test-locally/#testing-slate-admin-locally","text":"cd into slate-admin repository root directory execute sencha web start & execute cd sencha-workspace/SlateAdmin execute sencha app build ensure you\u2019re logged in to whatever Slate API host you\u2019re testing against in the same browser session navigate browser to http://localhost:1841/sencha-workspace/SlateAdmin/?apiHost=v1-demo.node0.slate.is","title":"Testing slate-admin locally"},{"location":"slate-admin/development/test-online/","text":"Testing slate-admin online from an emergence instance \u00b6 Visit /sencha-cmd/init-development?app=SlateAdmin to import all dependencies into the VFS Visit /app/SlateAdmin/development/","title":"Testing slate-admin online from an emergence instance"},{"location":"slate-admin/development/test-online/#testing-slate-admin-online-from-an-emergence-instance","text":"Visit /sencha-cmd/init-development?app=SlateAdmin to import all dependencies into the VFS Visit /app/SlateAdmin/development/","title":"Testing slate-admin online from an emergence instance"}]}